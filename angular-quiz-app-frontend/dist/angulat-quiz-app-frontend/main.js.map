{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/admin-panel/admin-panel.component.css","webpack:///./src/app/admin-panel/admin-panel.component.html","webpack:///./src/app/admin-panel/admin-panel.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/create-answer/create-answer.component.css","webpack:///./src/app/create-answer/create-answer.component.html","webpack:///./src/app/create-answer/create-answer.component.ts","webpack:///./src/app/create-question/create-question.component.css","webpack:///./src/app/create-question/create-question.component.html","webpack:///./src/app/create-question/create-question.component.ts","webpack:///./src/app/get-questions-by-test/get-questions-by-test.component.css","webpack:///./src/app/get-questions-by-test/get-questions-by-test.component.html","webpack:///./src/app/get-questions-by-test/get-questions-by-test.component.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/remove-answer/remove-answer.component.css","webpack:///./src/app/remove-answer/remove-answer.component.html","webpack:///./src/app/remove-answer/remove-answer.component.ts","webpack:///./src/app/services/http/http.service.ts","webpack:///./src/assets/Models/Managing/AnswerViewModel.ts","webpack:///./src/assets/Models/Managing/QuestionViewModel.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FkbWluLXBhbmVsL2FkbWluLXBhbmVsLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<div>\\r\\n  <div style='width: 300px;float: right;'>\\r\\n    <ul>\\r\\n      <li> <input type='radio' name='adminSelection' [(ngModel)]='adminSelection' [value]='1'>CreateAnswer</li>\\r\\n      <li> <input type='radio' name='adminSelection' [(ngModel)]='adminSelection' [value]='2'>RemoveAnswer</li>\\r\\n      <li> <input type='radio' name='adminSelection' [(ngModel)]='adminSelection' [value]='3'>GetQuestionsByTest</li>\\r\\n      <li> <input type='radio' name='adminSelection' [(ngModel)]='adminSelection' [value]='4'>CreateQuestion</li>\\r\\n      <li> <input type='radio' name='adminSelection' [(ngModel)]='adminSelection' [value]='5'>RemoveQuestion</li>\\r\\n      <li> <input type='radio' name='adminSelection' [(ngModel)]='adminSelection' [value]='6'>UpdateQuestion</li>\\r\\n      <li> <input type='radio' name='adminSelection' [(ngModel)]='adminSelection' [value]='7'>CreateTest</li>\\r\\n      <li> <input type='radio' name='adminSelection' [(ngModel)]='adminSelection' [value]='8'>UpdateTest</li>\\r\\n      <li> <input type='radio' name='adminSelection' [(ngModel)]='adminSelection' [value]='9'>RemoveTest</li>\\r\\n      <li> <input type='radio' name='adminSelection' [(ngModel)]='adminSelection' [value]='10'>CreateTestingUrl</li>\\r\\n      <li> <input type='radio' name='adminSelection' [(ngModel)]='adminSelection' [value]='11'>RemoveTestingUrl</li>\\r\\n      <li> <input type='radio' name='adminSelection' [(ngModel)]='adminSelection' [value]='12'>RemoveTestingResult</li>\\r\\n    </ul>\\r\\n  </div>\\r\\n  <div *ngIf=\\\"adminSelection===1\\\">\\r\\n    <app-create-answer></app-create-answer>\\r\\n  </div>\\r\\n  <div *ngIf=\\\"adminSelection===2\\\">\\r\\n<app-remove-answer></app-remove-answer>\\r\\n  </div>\\r\\n  <div *ngIf=\\\"adminSelection===3\\\">\\r\\n<app-get-questions-by-test></app-get-questions-by-test>\\r\\n  </div>\\r\\n  <div *ngIf=\\\"adminSelection===4\\\">\\r\\n<app-create-question></app-create-question>\\r\\n  </div>\\r\\n  <div *ngIf=\\\"adminSelection===5\\\">\\r\\n\\r\\n  </div>\\r\\n  <div *ngIf=\\\"adminSelection===6\\\">\\r\\n\\r\\n  </div>\\r\\n  <div *ngIf=\\\"adminSelection===7\\\">\\r\\n\\r\\n  </div>\\r\\n  <div *ngIf=\\\"adminSelection===8\\\">\\r\\n\\r\\n  </div>\\r\\n  <div *ngIf=\\\"adminSelection===9\\\">\\r\\n\\r\\n  </div>\\r\\n  <div *ngIf=\\\"adminSelection===10\\\">\\r\\n\\r\\n  </div>\\r\\n  <div *ngIf=\\\"adminSelection===11\\\">\\r\\n\\r\\n  </div>\\r\\n  <div *ngIf=\\\"adminSelection===12\\\">\\r\\n\\r\\n  </div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { HttpService } from '../services/http/http.service';\r\n\r\n@Component({\r\n  selector: 'app-admin-panel',\r\n  templateUrl: './admin-panel.component.html',\r\n  styleUrls: ['./admin-panel.component.css']\r\n})\r\nexport class AdminPanelComponent implements OnInit {\r\n\r\n  constructor(private http: HttpService) { \r\n    \r\n  }\r\n  adminSelection: number;\r\n  ngOnInit() {\r\n  }\r\n\r\n  GetAnswersByQuestionGuid(Guid: string)\r\n  {\r\n\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \".HomePageHeader{\\r\\n margin: auto;\\r\\ntext-align: center;\\r\\n}\\r\\n.MainPageLoginDiv\\r\\n{\\r\\n    height: 30px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Q0FDQyxhQUFhO0FBQ2QsbUJBQW1CO0NBQ2xCO0FBQ0Q7O0lBRUksYUFBYTtDQUNoQiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLkhvbWVQYWdlSGVhZGVye1xyXG4gbWFyZ2luOiBhdXRvO1xyXG50ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuLk1haW5QYWdlTG9naW5EaXZcclxue1xyXG4gICAgaGVpZ2h0OiAzMHB4O1xyXG59Il19 */\"","module.exports = \"<html>\\n\\n<head></head>\\n\\n<body>\\n    <div class='MainPageLoginDiv'>\\n        <app-login (IsAdminEvent)='receiveIsAdmin($event)'></app-login>\\n    </div>\\n\\n    <h1 class='HomePageHeader'>My QuizApp</h1>\\n\\n    <div *ngIf='isAdmin'>\\n        <app-admin-panel ></app-admin-panel>\\n    </div>\\n\\n\\n</body>\\n\\n</html>\"","import { Component} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent  {\n\n  isAdmin: boolean;\n\n \n\n  constructor() { }\n\n  receiveIsAdmin($event) {\n    this.isAdmin = $event;\n}\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http'\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { AdminPanelComponent } from './admin-panel/admin-panel.component';\r\nimport { CreateAnswerComponent } from './create-answer/create-answer.component';\r\nimport { RemoveAnswerComponent } from './remove-answer/remove-answer.component';\r\nimport { GetQuestionsByTestComponent } from './get-questions-by-test/get-questions-by-test.component';\r\nimport { CreateQuestionComponent } from './create-question/create-question.component'\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    AdminPanelComponent,\r\n    CreateAnswerComponent,\r\n    RemoveAnswerComponent,\r\n    GetQuestionsByTestComponent,\r\n    CreateQuestionComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    FormsModule\r\n  ],\r\n  providers: [ ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NyZWF0ZS1hbnN3ZXIvY3JlYXRlLWFuc3dlci5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<!-- <div *ngIf='testsList'>\\r\\n  <div>\\r\\n    <ul *ngFor='let test of testsList'>\\r\\n      <li (click)='isShowTestQuestionsValueChange(test)'>\\r\\n        <span>{{test.Name}}<br></span>\\r\\n        <span>{{test.Description}}</span>\\r\\n        <div *ngIf='isShowTestQuestions'>\\r\\n          <ul *ngFor='let question of selectedTest.Questions'>\\r\\n            <li (click)='isShowAddAnswerDivValueChange()' (click)='selectedQuestionGetAnswers(question)'>{{question.Instance}}</li>\\r\\n\\r\\n          </ul>\\r\\n        </div>\\r\\n      </li>\\r\\n    </ul>\\r\\n  </div>\\r\\n</div> -->\\r\\n<div *ngIf='isShowAddAnswerDiv'>\\r\\n  <h3>{{selectedQuestion.Instance}}</h3>\\r\\n  <div>\\r\\n    <label>Instance: </label>\\r\\n    <input type='text' [(ngModel)]='_instance'>\\r\\n  </div>\\r\\n  <div>\\r\\n    <label>Is correct:</label>\\r\\n    <input type='radio' [(ngModel)]='_isCorrect' value='true'>True\\r\\n    <input type='radio' [(ngModel)]='_isCorrect' value='false'> False\\r\\n  </div>\\r\\n</div>\\r\\n<button type='button' (click)='CreateAnswer()'>Confirm</button>\\r\\n<div>\\r\\n  <ul *ngFor='let answer of selectedQuestionAnswers'>\\r\\n    <li>\\r\\n      {{answer.Instance}}<button type='button' (click)='removeAnswer(answer.Guid)'>Remove</button>\\r\\n    </li>\\r\\n  </ul>\\r\\n</div>\"","import { Component, OnInit, Output, Input, OnChanges, SimpleChange, SimpleChanges } from '@angular/core';\r\nimport { QuestionViewModel } from '../../assets/Models/Managing/QuestionViewModel';\r\nimport { AnswerViewModel } from '../../assets/Models/Managing/AnswerViewModel';\r\nimport { HttpService } from '../services/http/http.service';\r\nimport { Title } from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'app-create-answer',\r\n  templateUrl: './create-answer.component.html',\r\n  styleUrls: ['./create-answer.component.css']\r\n})\r\nexport class CreateAnswerComponent implements OnInit, OnChanges {\r\n  //  testsList: TestViewModel[];\r\n  @Input()\r\n  selectedQuestion!: QuestionViewModel;\r\n  //  questionsList: QuestionViewModel[];\r\n  //  selectedTest: TestViewModel;\r\n  // isShowTestQuestions: boolean = false;\r\n  newAnswer: AnswerViewModel;\r\n  @Input() selectedQuestionAnswers!: AnswerViewModel[];\r\n  _instance: string;\r\n  _isCorrect: boolean;\r\n  @Input() isShowAddAnswerDiv!: boolean;\r\n\r\n  constructor(private http: HttpService, private title: Title) { }\r\n\r\n  isShowAddAnswerDivValueChange() {\r\n    if (this.isShowAddAnswerDiv == false) {\r\n      this.isShowAddAnswerDiv = true;\r\n    }\r\n  }\r\n\r\n  // isShowTestQuestionsValueChange(test:TestViewModel)\r\n  // {\r\n  //   if (this.isShowTestQuestions == false)\r\n  //   {\r\n  //     this.isShowTestQuestions = true;\r\n  //   }\r\n  //   this.selectedTest = test;\r\n  // }\r\n\r\n  // selectedQuestionGetAnswers(question: QuestionViewModel)\r\n  // {\r\n  //   this.selectedQuestion = question;\r\n  //   this.selectedQuestionAnswers = question.Answers;\r\n  // }\r\n\r\n  // GetAllTests()\r\n  // {\r\n  //   this.http.GetAllTests().subscribe((x: TestViewModel[]) => this.testsList = x);\r\n  // }\r\n\r\n  CreateAnswer() {\r\n    this.newAnswer = new AnswerViewModel();\r\n    var actionResult;\r\n    this.newAnswer.Instance = this._instance;\r\n    this.newAnswer.IsCorrect = this._isCorrect;\r\n    this.http.CreateAnswer(this.selectedQuestion.Guid, this.newAnswer).subscribe((x: boolean) => {\r\n      actionResult = x;\r\n      if (actionResult == true) {\r\n        this.selectedQuestionAnswers.push(this.newAnswer);\r\n        this.selectedQuestion.Answers = this.selectedQuestion.Answers;\r\n        this._instance = '';\r\n        this._isCorrect = null;\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  removeAnswer(_answerGuid: string)\r\n  {\r\n    var result;\r\n    this.http.removeAnswer(_answerGuid).subscribe((x: boolean) => {\r\n      result = x;\r\n      if (result == true) {\r\n        var deletedAnswer = this.selectedQuestionAnswers.find(x => x.Guid === _answerGuid);\r\n        var deletedAnswerIndex = this.selectedQuestionAnswers.indexOf(deletedAnswer);\r\n        if (deletedAnswerIndex !== -1)\r\n        {\r\n          this.selectedQuestionAnswers.splice(deletedAnswerIndex,1);\r\n          }\r\n        \r\n      }\r\n    });\r\n  }\r\n\r\n  addAnswer() {\r\n    this.newAnswer = new AnswerViewModel();\r\n    this.isShowAddAnswerDiv = true;\r\n  }\r\n\r\n  ngOnInit() {\r\n    // this.GetAllTests();\r\n    //  this.selectedQuestionAnswers = this.selectedQuestion.Answers;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.selectedQuestion) {\r\n      this.selectedQuestion = changes.selectedQuestion.currentValue;\r\n\r\n      this.selectedQuestionAnswers = changes.selectedQuestionAnswers.currentValue;\r\n    }\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NyZWF0ZS1xdWVzdGlvbi9jcmVhdGUtcXVlc3Rpb24uY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div *ngIf='testsList'>\\n  <div>\\n    <ul *ngFor='let test of testsList'>\\n      <li (click)='selectTest(test)'>{{test.Name}}</li>\\n      <div *ngIf='selectedTest'>\\n        <div>\\n          <ul *ngFor='let question of selectedTest.Questions'>\\n            <li (click)='selectQuestion(question)'>\\n              <div>\\n                {{question.Instance}}\\n                <button type='button' (click)='removeQuestion(selectedTest.Guid,question.Guid)'>Remove</button>\\n                <div>\\n                  <!-- <label>Answers: {{question.Answers.length}}</label> -->\\n                  <button [value]='question' type='button' \\n                  (click)='selectQuestion(question)'\\n                   (click)='isShowAddAnswerValueChange()'>Add</button>\\n                </div>\\n              </div>\\n            </li>\\n          </ul>\\n          <div *ngIf='isShowAddAnswer'>\\n            <!-- <div>\\n                <label>Instance: </label>\\n                <input type='text' [(ngModel)]='newAnswer.Instance'>\\n              </div>\\n              <div>\\n                <label>Is correct:</label>\\n                <input type='radio' value='true' [(ngModel)]='newAnswer.IsCorrect'>True\\n                <input type='radio' value='false' [(ngModel)]='newAnswer.IsCorrect'>False\\n              </div>\\n              <button type='button' (click)='addAnswer(selectedQuestion.Guid)'>Confirm</button>-->\\n            <div *ngIf='isShowAddAnswer'>\\n              <app-create-answer [selectedQuestion]=selectedQuestion [selectedQuestionAnswers]=selectedQuestionAnswers\\n                [isShowAddAnswerDiv]=isShowAddAnswer></app-create-answer>\\n            </div>\\n\\n          </div>\\n\\n        </div>\\n        <div *ngIf='isShowAddQuestionDiv'>\\n          <div>\\n            <label>Instance:</label>\\n            <input type='text' [(ngModel)]='newQuestion.Instance'>\\n          </div>\\n          <div>\\n            <label>Hint:</label>\\n            <input type='text' [(ngModel)]='newQuestion.Hint'>\\n          </div>\\n          <div>\\n            <button type='button' (click)='confirmAddQuestion(newQuestion)'>Confirm</button>\\n          </div>\\n        </div>\\n        <div>\\n          <button type='button' (click)='addQuestion()'>Add question</button>\\n        </div>\\n      </div>\\n    </ul>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { TestViewModel } from '../../assets/Models/Managing/TestViewModel';\nimport { HttpService } from '../services/http/http.service';\nimport { QuestionViewModel } from '../../assets/Models/Managing/QuestionViewModel';\nimport { AnswerViewModel } from '../../assets/Models/Managing/AnswerViewModel';\nimport { Title } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-create-question',\n  templateUrl: './create-question.component.html',\n  styleUrls: ['./create-question.component.css'],\n  \n})\nexport class CreateQuestionComponent implements OnInit {\n  testsList: TestViewModel[];\n  selectedTest: TestViewModel;\n  isShowAddQuestionDiv: boolean = false;\n  isShowAddAnswer: boolean = false;\n  newQuestion: QuestionViewModel;\n  newAnswer: AnswerViewModel = new AnswerViewModel();\n  selectedQuestion: QuestionViewModel;\n  selectedQuestionAnswers: AnswerViewModel[];\n  constructor(private http: HttpService, private title: Title) {\n  }\n\n  getAllTests() {\n    this.http.GetAllTests().subscribe((x: TestViewModel[]) => this.testsList = x);\n  }\n\n  selectQuestion(_question: QuestionViewModel) {\n    this.selectedQuestion = _question;\n    this.selectedQuestionAnswers = this.selectedQuestion.Answers;\n   // this.title.setTitle(this.selectedQuestion.Answers.length.toString());\n  }\n\n  selectTest(_test: TestViewModel) {\n    this.selectedTest = _test;\n  }\n\n  addQuestion() {\n    this.isShowAddQuestionDiv = true;\n    this.newQuestion = new QuestionViewModel();\n    this.isShowAddAnswer = false;\n  }\n\n  addAnswer() {\n    this.isShowAddAnswer = true;\n    \n  }\n\n//   addAnswer(_questionGuid) {\n//     this.isShowAddAnswer = false;\n//     this.http.CreateAnswer(_questionGuid, this.newAnswer).subscribe((x: boolean)=>{\n//       if (x == true)\n//       {\n//         this.selectedQuestion.Answers.push(this.newAnswer);\n//         this.newAnswer = new AnswerViewModel();\n//         }\n//     });\n// }\n\n  isShowAddAnswerValueChange() {\n    this.isShowAddAnswer = true;\n    this.http.GetAnswersByQuestionGuid(this.selectedQuestion.Guid).subscribe(\n      (x: AnswerViewModel[]) => this.selectedQuestion.Answers = x);\n}\n\n  removeQuestion(_testGuid: string, _questionGuid: string) {\n    var result;\n    this.http.removeQuestion(_testGuid, _questionGuid).subscribe((x: boolean) => {\n      result = x;\n      if (result == true)\n      {\n        var index = this.selectedTest.Questions.findIndex(z => z.Guid == _questionGuid);\n        this.selectedTest.Questions.splice(index,1);\n      }\n    });\n    this.isShowAddAnswer = false;\n  }\n\n  confirmAddQuestion(_question: QuestionViewModel) {\n    this.http.createQuestion(this.selectedTest.Guid, _question).\n      subscribe((x: QuestionViewModel) => {\n        this.selectedTest.Questions.push(x);\n      });\n    this.isShowAddQuestionDiv = false;\n    this.newQuestion = new QuestionViewModel();\n    this.isShowAddAnswer = false;\n  }\n\n  ngOnInit() {\n    this.getAllTests();\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2dldC1xdWVzdGlvbnMtYnktdGVzdC9nZXQtcXVlc3Rpb25zLWJ5LXRlc3QuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div *ngIf='testsList'>\\n  <div>\\n    <ul *ngFor='let test of testsList'>\\n      <li (click)='isShowTestAnswersValueChange(test)'>{{test.Name}}</li>\\n    </ul>\\n  </div>\\n  <div *ngIf='isShowTestAnswers'>\\n<ul *ngFor='let question of selectedTest.Questions'>\\n  <li>\\n    {{question.Instance}}\\n  </li>\\n</ul>\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { TestViewModel } from '../../assets/Models/Managing/TestViewModel';\nimport { HttpService } from '../services/http/http.service';\n\n@Component({\n  selector: 'app-get-questions-by-test',\n  templateUrl: './get-questions-by-test.component.html',\n  styleUrls: ['./get-questions-by-test.component.css']\n})\nexport class GetQuestionsByTestComponent implements OnInit {\n\n  testsList: TestViewModel[];\n  selectedTest: TestViewModel;\n  selectedTestQuestionsList: TestViewModel[];\n  isShowTestAnswers: boolean = false;\n\n  constructor(private http: HttpService) { }\n\n  isShowTestAnswersValueChange(test: TestViewModel) {\n    \n    if (this.isShowTestAnswers == true) {\n      this.isShowTestAnswers = false;\n    }\n    else {\n      this.selectedTest = test;\n      this.isShowTestAnswers = true;\n    }\n  }\n\n  getAllTests() {\n    this.http.GetAllTests().subscribe((x: TestViewModel[]) => this.testsList = x);\n  }\n\n  ngOnInit() {\n    this.getAllTests();\n  }\n\n}\n","module.exports = \".CredInput{\\r\\n    float: right;\\r\\n  margin-right: 5px;\\r\\n}\\r\\n\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGFBQWE7RUFDZixrQkFBa0I7Q0FDbkIiLCJmaWxlIjoic3JjL2FwcC9sb2dpbi9sb2dpbi5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLkNyZWRJbnB1dHtcclxuICAgIGZsb2F0OiByaWdodDtcclxuICBtYXJnaW4tcmlnaHQ6IDVweDtcclxufVxyXG5cclxuIl19 */\"","module.exports = \"<form #loginForm='ngForm' *ngIf='!IsLoginSuccessfull'>\\n  <div>\\n    <div class='CredInput'>\\n      <button [disabled]='!loginForm.form.valid'\\n       type='submit'\\n       (click)='Login(LoginInput,PasswordInput)' \\n       tabindex='3'>Log in</button>\\n\\n    </div>\\n\\n    <div class='CredInput'>\\n      <label>Password: </label>\\n      <input required name='password' class='form-control' type='password' placeholder=\\\"Password\\\" [(ngModel)]='PasswordInput'\\n        tabindex='2'>\\n    </div>\\n\\n    <div class='CredInput'>\\n      <label>Login: </label>\\n      <input required name='login' type='text' class='form-control' placeholder=\\\"Login\\\" [(ngModel)]='LoginInput'\\n        tabindex='1'>\\n    </div>\\n\\n  </div>\\n</form>\\n<div *ngIf='IsLoginSuccessfull' class='CredInput'>\\n  <label>Current user: {{CurrentUser.Username}}</label>\\n  <button style='margin-left: 7px;' type='submit' (click)='Logout()'>Log out</button>\\n  <button type='submit'>test</button>\\n</div>\"","import { Component, OnInit, Output,EventEmitter, ViewChild } from '@angular/core';\nimport { HttpService } from '../services/http/http.service';\nimport { LoginViewModel } from '../../assets/Models/LoginViewModel'\nimport { Title } from '@angular/platform-browser';\nimport { TestViewModel } from '../../assets/Models/Managing/TestViewModel';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  constructor(private http: HttpService,private title:Title) { }\n\n  CurrentUser: LoginViewModel = { Username: '', Password: '' };\n  LoginInput: string;\n  PasswordInput: string;\n  IsLoginSuccessfull: boolean = false;\n  IsAdmin: boolean = false;\n  @Output() IsAdminEvent = new EventEmitter<boolean>();\n  Tests: TestViewModel[] = [];\n \n  sendIsAdmin()\n  {\n    this.IsAdminEvent.emit(this.IsAdmin);\n  }\n\n  ngOnInit() {\n  }\n\n  Logout() {\n    this.IsLoginSuccessfull = false;\n    this.IsAdmin = false;\n    this.CurrentUser.Username = '';\n    this.CurrentUser.Password = '';\n    this.LoginInput = '';\n    this.PasswordInput = '';\n  }\n\n  Login(LoginInput, PasswordInput) {\n    this.http.Login(LoginInput, PasswordInput).subscribe((x: LoginViewModel) => {\n      this.CurrentUser = x;\n      this.IsLoginSuccessfull = true;\n      if (this.CurrentUser.Username == 'admin')\n      {\n        this.IsAdmin = true;\n      }\n      this.sendIsAdmin();\n    });\n\n    this.LoginInput = '';\n    this.PasswordInput = '';\n  }\n}","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3JlbW92ZS1hbnN3ZXIvcmVtb3ZlLWFuc3dlci5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div>\\n  <div>\\n    <ul *ngFor='let test of testsList'>\\n      <li (click)='isShowTestQuestionsValueChange(test)'>\\n        <span>{{test.Name}}</span>{{test.Description}}\\n      </li>\\n    </ul>\\n  </div>\\n  <div *ngIf='isShowTestQuestions'>\\n    <ul *ngFor='let question of selectedTest.Questions' (click)='selectedQuestionGetAnswers(question)'>\\n      <li>{{question.Instance}}</li>\\n    </ul>\\n  </div>\\n  <div *ngIf='selectedQuestionAnswers'>\\n    <ul *ngFor='let answer of selectedQuestionAnswers'>\\n      <li>\\n        <button (click)='removeAnswer(answer.Guid)'>Remove</button> {{answer.Instance}}\\n      </li>\\n    </ul>\\n  </div>\"","import { Component, OnInit, Input } from '@angular/core';\nimport { TestViewModel } from '../../assets/Models/Managing/TestViewModel';\nimport { QuestionViewModel } from '../../assets/Models/Managing/QuestionViewModel';\nimport { AnswerViewModel } from '../../assets/Models/Managing/AnswerViewModel';\nimport { HttpService } from '../services/http/http.service';\n\n@Component({\n  selector: 'app-remove-answer',\n  templateUrl: './remove-answer.component.html',\n  styleUrls: ['./remove-answer.component.css']\n})\nexport class RemoveAnswerComponent implements OnInit {\n testsList: TestViewModel[];\n\n questionsList: QuestionViewModel[];\n selectedTest: TestViewModel;\n isShowTestQuestions: boolean = false;\n  selectedQuestion:QuestionViewModel;\n selectedQuestionAnswers: AnswerViewModel[];\n  _instance: string;\n  _isCorrect: boolean;\n  constructor(private http:HttpService) { }\n\n  selectedQuestionGetAnswers(question: QuestionViewModel)\n  {\n    this.selectedQuestion = question;\n    this.selectedQuestionAnswers = question.Answers;\n  }\n\n  isShowTestQuestionsValueChange(test:TestViewModel)\n  {\n    if (this.isShowTestQuestions == true)\n    {\n      this.isShowTestQuestions = false;\n    }\n    else\n    {\n      this.isShowTestQuestions = true;\n    }\n    this.selectedTest = test;\n  }\n\n  GetAllTests()\n  {\n    this.http.GetAllTests().subscribe((x: TestViewModel[]) => this.testsList = x);\n  }\n\n  removeAnswer(_answerGuid: string)\n  {\n    var result;\n    this.http.removeAnswer(_answerGuid).subscribe((x: boolean) => {\n      result = x;\n      if (result == true) {\n        var deletedAnswer = this.selectedQuestion.Answers.find(x => x.Guid === _answerGuid);\n        var deletedAnswerIndex = this.selectedQuestion.Answers.indexOf(deletedAnswer);\n        if (deletedAnswerIndex !== -1)\n        {\n          this.selectedQuestion.Answers.splice(deletedAnswerIndex);\n          }\n        \n      }\n    });\n  }\n\n  ngOnInit() {\n    this.GetAllTests();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams, HttpRequest, HttpHandler } from '@angular/common/http'\nimport { AnswerViewModel } from 'src/assets/Models/Managing/AnswerViewModel';\nimport { QuestionViewModel } from 'src/assets/Models/Managing/QuestionViewModel';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\n  constructor(private http: HttpClient) { }\n  //Login Page methods\n  Login(Login:string,Password:string)\n  {\n    const body = { Username: Login, Password: Password };\n    return this.http.post('http://localhost:53029/Account/Login/', body);\n  }\n//Admin page methods\n  GetAllTests()\n  {\n    return this.http.get('http://localhost:53029/Admin/GetAllTests/');\n  }\n\n  GetAnswersByQuestionGuid(questionGuid: string)\n  {\n    const params = new HttpParams().set('string', questionGuid);\n    return this.http.get('http://localhost:53029/Apilike/GetAnswersByQuestionGuid/', { params });\n  }\n\n  CreateAnswer(_questionGuid:string,_answer:AnswerViewModel)\n  {\n    let body = {\n      questionGuid:_questionGuid , answer: {\n      Instance: _answer.Instance,\n      IsCorrect: _answer.IsCorrect,\n      Guid: _answer.Guid //fix\n    } };\n   return this.http.post('http://localhost:53029/Apilike/CreateAnswer/', body);\n  }\n\n  createQuestion(_testGuid: string, _question: QuestionViewModel)\n  {\n    let body = {\n      testGuid: _testGuid,\n      question: {\n        Instance: _question.Instance,\n        Hint: _question.Hint,\n        Answers: null,\n        IsValid: false\n      }\n    };\n    return this.http.post('http://localhost:53029/Apilike/CreateQuestion/', body);\n  }\n\n  removeQuestion(_testGuid: string, _questionGuid:string) {\n   return this.http.post('http://localhost:53029/Apilike/RemoveQuestion/', { testGuid: _testGuid, questionGuid: _questionGuid });\n}\n\n  removeAnswer(_answerGuid: string) {\n  return  this.http.post('http://localhost:53029/Apilike/RemoveAnswer', { answerGuid: _answerGuid });\n  }\n\n}\n","export class AnswerViewModel\r\n{\r\n  Instance: string;\r\n  IsCorrect: boolean;\r\n  Guid: string;\r\n}","import { AnswerViewModel } from \"./AnswerViewModel\";\r\n\r\nexport class QuestionViewModel{\r\n  Instance: string;\r\n  Hint: string;\r\n  Answers: AnswerViewModel[];\r\n  IsValid: boolean;\r\n  Guid: string;\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}